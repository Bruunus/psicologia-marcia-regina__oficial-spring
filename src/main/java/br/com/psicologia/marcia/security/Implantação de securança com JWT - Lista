Algumas op√ß√µes poss√≠veis que voc√™ pode estar pensando:

[FEITO]		* 	N√£o pode o mesmo usuario fazer login sendo que um token j√° foi gerado, 
				ent√£o a requisi√ß√£o deve ser rejeitada e emitir uma mensagem para o frontend
				"Este usu√°rio j√° est√° logado"	- FEITO
		
		
	
COISAS QUE ESQUECI ENTRE O FRONT E BACK COM A NOVA IMPLANTA√á√ÉO DO JWT (20/jun/2025)

	*	Precisamos finalizar o tratamento de resposta do servidor no login no frontend. As mensagens precisam ser apresentadas
	em caso de erro, as que faltam s√£o:
		
[FEITO]		*	usuario_inexistente: O controler precisa antes de atribuir um token, verificar se este usu√°rio existe no banco. Do 
		contr√°rio ele precisa retornar que o usuario n√£o existe, e o frontend j√° estar√° esperando e saber√° como tratar, esta 
		mensagem estar√° sendo tratada no 401:
		
			case 'usuario_inexistente':
            this.gerenciadoDeAutenticacaoService.setErrorMessage('Usu√°rio inexistente');
            break;
            
            
[FEITO]	   	*	Erro desconhecido ou silencioso: Qualquer outro erro que possa dar al√©m destes tratados que seja 401, 
        o frontend precisa saber. 
        
        * Fa√ßa um debug no processo de login e logout, os dois est√£o apresentando erros no console e temos que verificar.
        
        * Retirar 100@ a a entidade e repositorio responsavel pelo status_login GerenciadorDeAcessoDeUsuarioRepository e a entidade GerenciadorDeAcessoDeUsuario
        Vai com calma porque estas classes est√£o interligadas com o sistema de seguran√ßa
        
        * Reestruturar todas as mensagens sincronizadas dos enddpoint de autentica√ß√£o e afins com a estrutura JWT E criar uma tabela chamada analitcs para inicialmente
        receber todos os erros e mensagens do servidor e para cada api adicione o que o usu√°rio est√° fazendo naquele endpoint 
        
        

PR√ìXIMAS IMPLANTA√á√ïES



Criar outro tipo de auditoria, uma entidade de auditoria de erros de mensagens de todas as requisi√ß√µes e armazenar no banco para analise e coleta de dados.
        
 
		
		
[FEITO ]		‚ùì Bloquear acesso com token expirado automaticamente.

[FEITO] 	üïê Associar hor√°rio de login/logout por token (registro de auditoria).		
	
				Falta: 
					*	Coletar o IP da m√°quina
					*	"O que significa a coluna user_agent da entidade AuditoriaDeSessaoDeUsuarioService? Qual a fun√ß√£o dela exatamente, pois fiz um teste de logout e n√£o foi preenchida"

				üë• Implementar diferentes permiss√µes por ROLE (ADMIN, USER...).

				üîÅ Renovar token JWT automa ticamente (refresh token).

				üì¶ Aplicar isso ao Angular agora (testar via frontend).

				üß™ Criar testes automatizados para autentica√ß√£o.
		
		
		
		
		
		
		
		
		
		
		
		